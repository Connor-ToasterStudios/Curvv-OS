//This file was generated by generators/idthandlers.py
#include "utils.h"
#include "idthandlerscommon.h"
#include "irqhandlers.h"
void exceptionHandler0() {
	printl("Division by zero occured");
	exceptionHandlerCommon();
}

void exceptionHandler1() {
	printl("Debug point reached");
	exceptionHandlerCommon();
}

void exceptionHandler2() {
	printl("Non-maskable interrupt");
	exceptionHandlerCommon();
}

void exceptionHandler3() {
	printl("Breakpoint reached");
	exceptionHandlerCommon();
}

void exceptionHandler4() {
	printl("Overflow occured");
	exceptionHandlerCommon();
}

void exceptionHandler5() {
	printl("Bound range exceeded");
	exceptionHandlerCommon();
}

void exceptionHandler6() {
	printl("Invalid opcode found");
	exceptionHandlerCommon();
}

void exceptionHandler7() {
	printl("FPU not found");
	exceptionHandlerCommon();
}

void exceptionHandler8() {
	printl("Double fault occured");
	exceptionHandlerCommon();
}

void exceptionHandler9() {
	printl("Coprocessor segment overrun occured");
	exceptionHandlerCommon();
}

void exceptionHandler10() {
	printl("Invalid segment selector found");
	exceptionHandlerCommon();
}

void exceptionHandler11() {
	printl("Failure to load segment occured");
	exceptionHandlerCommon();
}

void exceptionHandler12() {
	printl("Protection fault occured");
	exceptionHandlerCommon();
}

void exceptionHandler13() {
	printl("Page fault occured");
	exceptionHandlerCommon();
}

void exceptionHandler14() {
	//This handler is for a reserved interrupt, and therefore only exists for consistency
}

void exceptionHandler15() {
	printl("x87 Floating point exception occured");
	exceptionHandlerCommon();
}

void exceptionHandler16() {
	printl("Bad alignment found");
	exceptionHandlerCommon();
}

void exceptionHandler17() {
	printl("Machine check occured");
	exceptionHandlerCommon();
}

void exceptionHandler18() {
	printl("SIMD Floating point exception occured");
	exceptionHandlerCommon();
}

void exceptionHandler19() {
	printl("Virtualization exception occured");
	exceptionHandlerCommon();
}

void exceptionHandler20() {
	printl("Invalid control protection found");
	exceptionHandlerCommon();
}

void exceptionHandler21() {
	//This handler is for a reserved interrupt, and therefore only exists for consistency
}

void exceptionHandler22() {
	//This handler is for a reserved interrupt, and therefore only exists for consistency
}

void exceptionHandler23() {
	//This handler is for a reserved interrupt, and therefore only exists for consistency
}

void exceptionHandler24() {
	//This handler is for a reserved interrupt, and therefore only exists for consistency
}

void exceptionHandler25() {
	//This handler is for a reserved interrupt, and therefore only exists for consistency
}

void exceptionHandler26() {
	//This handler is for a reserved interrupt, and therefore only exists for consistency
}

void exceptionHandler27() {
	printl("Hypervisor injection exception occured");
	exceptionHandlerCommon();
}

void exceptionHandler28() {
	printl("VMM Communication failed");
	exceptionHandlerCommon();
}

void exceptionHandler29() {
	printl("Security exception occured");
	exceptionHandlerCommon();
}

void exceptionHandler30() {
	//This handler is for a reserved interrupt, and therefore only exists for consistency
}

void exceptionHandler31() {
	printl("Triple fault occured");
	exceptionHandlerCommon();
}

